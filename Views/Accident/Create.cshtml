@model GuvenPortAPI.Models.AccidentCreateViewModel

<div class="container mt-5">
    <h2 class="text-center mb-4">Kaza Ekle</h2>

    <form id="accidentForm">
        <div class="form-group">
            <label for="accDate">Kaza Tarihi</label>
            <input type="date" id="accDate" class="form-control" required />
        </div>

        <div class="form-group">
            <label for="accTime">Kaza Saati</label>
            <input type="time" id="accTime" class="form-control" required />
        </div>

        <div class="form-group">
            <label for="fatality">Ölüm Durumu</label>
            <input type="checkbox" id="fatality" class="form-check-input" />
        </div>

        <div class="form-group">
            <label for="injury">Yaralanma Durumu</label>
            <input type="checkbox" id="injury" class="form-check-input" />
        </div>

        <div class="form-group">
            <label for="propertyDamage">Mülk Hasarı Durumu</label>
            <input type="checkbox" id="propertyDamage" class="form-check-input" />
        </div>

        <div class="form-group">
            <label for="nearMiss">Yakın Geçiş Durumu</label>
            <input type="checkbox" id="nearMiss" class="form-check-input" />
        </div>

        <div class="form-group">
            <label for="storyOfAccident">Kaza Hikayesi</label>
            <textarea id="storyOfAccident" class="form-control"></textarea>
        </div>

        <div class="form-group">
            <label for="officeSelect">Ofis Seçin</label>
            <select id="officeSelect" class="form-control">
                <option value="">Ofis Seçin...</option>
                <!-- Ofisler buraya dinamik olarak yüklenecek -->
            </select>
        </div>

        <div class="form-group">
            <label for="workplaceSelect">Çalışma Yeri Seçin</label>
            <select id="workplaceSelect" class="form-control" disabled>
                <option value="">Çalışma Yeri Seçin...</option>
                <!-- Çalışma yerleri buraya dinamik olarak yüklenecek -->
            </select>
        </div>

        <div class="form-group">
            <label for="sgkInfoDate">SGK Bilgi Tarihi</label>
            <input type="date" id="sgkInfoDate" class="form-control" />
        </div>

        <div class="form-group">
            <label for="sgkInfoCheck">SGK Bilgisi Kontrolü</label>
            <input type="checkbox" id="sgkInfoCheck" class="form-check-input" />
        </div>

        <div class="form-group">
            <label for="staffList">Doktorlar:</label>
            <select id="staffList" class="form-control" multiple>
                <!-- Doktorlar buraya dinamik olarak yüklenecek -->
            </select>
        </div>

        <div class="form-group">
            <label for="contractList">Kontraktlar:</label>
            <div id="contractList" class="form-control" style="height: 100px; overflow-y: auto;">
                <!-- Kontraktlar buraya dinamik olarak yüklenecek -->
            </div>
        </div>

        <input type="hidden" id="selectedEmployeeIds" />

        <button type="submit" class="btn btn-primary">Kaydet</button>

        <input type="hidden" id="selectedContractId" />

    </form>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/js-cookie@3.0.1/dist/js.cookie.min.js"></script>
    <script>

        $(document).ready(function () {
            const token = Cookies.get('authToken');
            loadOffices(); // Sayfa yüklendiğinde ofisleri yükle
            $('#officeSelect').on('change', function () {
                const officeId = $(this).val();
                $('#workplaceSelect').prop('disabled', !officeId);
                $('#workplaceSelect').empty().append('<option value="">Çalışma Yeri Seçin...</option>');

                if (officeId) {
                    loadWorkplaces(officeId);
                }
            });

            $('#workplaceSelect').on('change', function () {
                const workplaceId = $(this).val();
                $('#staffList').empty(); // Doktor listesini temizle
                $('#contractList').empty(); // Kontrakt listesini temizle

                if (workplaceId) {
                    loadStaffByWorkplace(workplaceId);
                    loadContractsByWorkplace(workplaceId);
                }
            });

            $('#accidentForm').on('submit', function (e) {
                e.preventDefault();
                submitAccidentForm();
            });
        });

        function loadOffices() {
            $.ajax({
                url: 'https://localhost:44384/api/office/all',
                type: 'GET',
                headers: {
                'Authorization': `Bearer ${token}`,
                'Accept': 'text/plain'
            },
                success: function (data) {
                    console.log("Ofisler başarıyla yüklendi:", data);
                    populateOffices(data);
                },
                error: function () {
                    console.error("Ofisler yüklenirken bir hata oluştu.");
                }
            });
        }

        function populateOffices(offices) {
            $('#officeSelect').empty().append('<option value="">Ofis Seçin...</option>');
            $.each(offices, function (i, office) {
                $('#officeSelect').append(`<option value="${office.id}">${office.officeName}</option>`);
            });
        }

        function loadWorkplaces(officeId) {
            $.ajax({
                url: `https://localhost:44384/api/office/${officeId}/active-workplaces`,
                type: 'GET',
                headers: {
                'Authorization': `Bearer ${token}`,
                'Accept': 'text/plain'
            },
                success: function (data) {
                    populateWorkplaces(data);
                },
                error: function () {
                    alert('Çalışma yerleri yüklenirken bir hata oluştu.');
                }
            });
        }

        function populateWorkplaces(workplaces) {
            $('#workplaceSelect').empty().append('<option value="">Çalışma Yeri Seçin...</option>');
            $.each(workplaces, function (i, workplace) {
                $('#workplaceSelect').append(`<option value="${workplace.id}">${workplace.name}</option>`);
            });
        }

        function loadStaffByWorkplace(workplaceId) {
            $.ajax({
                url: 'https://localhost:44384/api/staff/ListStaff',
                type: 'GET',
                headers: {
                'Authorization': `Bearer ${token}`,
                'Accept': 'text/plain'
            },
                success: function (data) {
                    populateDoctors(data);
                },
                error: function () {
                    console.error("Doktorlar yüklenirken bir hata oluştu.");
                }
            });
        }

        function populateDoctors(staff) {
            $('#staffList').empty(); // Mevcut doktor listesini temizle
            const activeDoctors = staff.filter(doctor => doctor.doctor !== null);

            $.each(activeDoctors, function (i, doctor) {
                $('#staffList').append(`<option value="${doctor.id}">${doctor.name}</option>`);
            });
        }

        function loadContractsByWorkplace(workplaceId) {
            $.ajax({
                url: `https://localhost:44384/api/contracts/byworkplace/${workplaceId}/employees`,
                type: 'GET',
                headers: {
                'Authorization': `Bearer ${token}`,
                'Accept': 'text/plain'
            },
                success: function (data) {
                    populateContracts(data);
                },
                error: function () {
                    alert('Kontraktlar yüklenirken bir hata oluştu.');
                }
            });
        }

        function populateContracts(contracts) {
            $('#contractList').empty(); // Mevcut içerikleri temizle

            $.each(contracts, function (i, contract) {
                let contractDiv = $('<div>').append(`<strong>${contract.name}</strong>`);

                // Eğer çalışanlar varsa, onları listele
                if (contract.employees && contract.employees.length > 0) {
                    let employeeList = $('<ul>'); // Çalışanları listelemek için bir <ul> oluştur
                    $.each(contract.employees, function (j, employee) {
                        let employeeItem = $('<li>').text(employee.name)
                            .append(` <button class="employeeBtn btn btn-outline-primary" data-employeeid="${employee.id}" style="margin-left: 10px;">Seç</button>`); // Seç butonu ekle
                        employeeList.append(employeeItem); // Çalışanları listeye ekle
                    });
                    contractDiv.append(employeeList); // Kontrakt div'ine çalışan listesini ekle
                }
                $('#contractList').append(contractDiv); // Kontraktı ana listeye ekle
            });

            // Seçim butonlarına tıklama olayını bağlayın
                    $(document).on('click', '.employeeBtn', function (e) {
            e.preventDefault(); // Formu gönderimini engelle
            var employeeId = $(this).data('employeeid'); // Butondan employee ID'yi al

            let selectedIds = $('#selectedEmployeeIds').val().split(',').filter(Boolean); // Var olanları al ve boşları filtrele

            // Eğer bu ID daha önce eklenmemişse ekle
            if (!selectedIds.includes(employeeId.toString())) {
                selectedIds.push(employeeId);
                $('#selectedEmployeeIds').val(selectedIds.join(',')); // ID'leri gizli alana ekle
                $(this).data('selected', true); // Seçildi olarak işaretle
                $(this).css({'background-color': '#007bff', 'color': 'white'});
            } else {
                // Eğer bu ID zaten ekli ise, sil
                selectedIds = selectedIds.filter(id => id !== employeeId.toString());
                $('#selectedEmployeeIds').val(selectedIds.join(',')); // ID'leri güncelle
                $(this).data('selected', false); // Seçim iptal
                $(this).css({'background-color': '', 'color': ''});
            }
        });
        }

                function submitAccidentForm() {
            const selectedStaff = [...document.getElementById('staffList').options]
                .filter(option => option.selected)
                .map(option => parseInt(option.value));

            // Seçilen kontraktları almak için
            const selectedContracts = [];
            $('#contractList .employeeBtn').each(function () {
                if ($(this).data('selected')) { // Eğer buton seçildiyse
                    selectedContracts.push(parseInt($(this).data('employeeid')));
                }
            });

            const accidentData = {
                accDate: $('#accDate').val(),
                accTime: $('#accTime').val() + ":00",
                fatality: $('#fatality').is(':checked'),
                injury: $('#injury').is(':checked'),
                propertyDamage: $('#propertyDamage').is(':checked'),
                nearMiss: $('#nearMiss').is(':checked'),
                storyOfAccident: $('#storyOfAccident').val(),
                idWorkplace: parseInt($('#workplaceSelect').val()),
                sgkInfoDate: $('#sgkInfoDate').val(),
                sgkInfoCheck: $('#sgkInfoCheck').is(':checked'),
                selectedStaffIds: selectedStaff,
                selectedContractIds: selectedContracts // Burada. Kontrakt ID'leri güncel
            };

            console.log("Gönderilecek veri:", JSON.stringify(accidentData)); // Gönderilecek veriyi logla

            fetch('https://localhost:44384/api/accident', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(accidentData)
            })
            .then(response => {
                if (response.ok) {
                    alert('Kaza başarıyla kaydedildi!');
                    $('#accidentForm')[0].reset(); // Formu sıfırla
                } else {
                    return response.json().then(err => {
                        throw new Error(err.message || 'Kayıt sırasında hata oluştu.');
                    });
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert(error.message);
            });
        }
    </script>
}
