@model GuvenPortAPI.Models.AccidentCreateViewModel

<div class="container mt-5">
    <h2 class="text-center mb-4">Kaza Ekle</h2>

    <form onsubmit="event.preventDefault(); submitAccidentForm();">
        <div class="form-group">
            <label for="accDate">Kaza Tarihi</label>
            <input type="date" id="accDate" class="form-control" required />
        </div>

        <div class="form-group">
            <label for="accTime">Kaza Saati</label>
            <input type="time" id="accTime" class="form-control" required />
        </div>

        <div class="form-group">
            <label for="fatality">Ölüm Durumu</label>
            <input type="checkbox" id="fatality" class="form-check-input" />
        </div>

        <div class="form-group">
            <label for="injury">Yaralanma Durumu</label>
            <input type="checkbox" id="injury" class="form-check-input" />
        </div>

        <div class="form-group">
            <label for="propertyDamage">Mülk Hasarı Durumu</label>
            <input type="checkbox" id="propertyDamage" class="form-check-input" />
        </div>

        <div class="form-group">
            <label for="nearMiss">Yakın Geçiş Durumu</label>
            <input type="checkbox" id="nearMiss" class="form-check-input" />
        </div>

        <div class="form-group">
            <label for="storyOfAccident">Kaza Hikayesi</label>
            <textarea id="storyOfAccident" class="form-control"></textarea>
        </div>

        <div class="form-group">
            <label for="officeSelect">Ofis Seçin</label>
            <select id="officeSelect" class="form-control">
                <option value="">Ofis Seçin...</option>
                <!-- Ofisler buraya dinamik olarak yüklenecek -->
            </select>
        </div>

        <div class="form-group">
            <label for="workplaceSelect">Çalışma Yeri Seçin</label>
            <select id="workplaceSelect" class="form-control" disabled>
                <option value="">Çalışma Yeri Seçin...</option>
                <!-- Çalışma yerleri buraya dinamik olarak yüklenecek -->
            </select>
        </div>

        <div class="form-group">
            <label for="sgkInfoDate">SGK Bilgi Tarihi</label>
            <input type="date" id="sgkInfoDate" class="form-control" />
        </div>

        <div class="form-group">
            <label for="sgkInfoCheck">SGK Bilgisi Kontrolü</label>
            <input type="checkbox" id="sgkInfoCheck" class="form-check-input" />
        </div>

        <div class="form-group">
            <label for="staffList">Doktorlar:</label>
            <select id="staffList" class="form-control" multiple>
                <!-- Doktorlar buraya dinamik olarak yüklenecek -->
            </select>
        </div>

        <div class="form-group">
            <label for="contractList">Kontraktlar:</label>
            <select id="contractList" class="form-control" multiple>
                <!-- Kontraktlar buraya dinamik olarak yüklenecek -->
            </select>
        </div>

        <button type="submit" class="btn btn-primary">Kaydet</button>
    </form>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function () {
            loadOffices(); // Sayfa yüklendiğinde ofisleri yükle

            $('#officeSelect').on('change', function () {
                var officeId = $(this).val();
                $('#workplaceSelect').prop('disabled', !officeId);
                $('#workplaceSelect').empty().append('<option value="">Çalışma Yeri Seçin...</option>');

                if (officeId) {
                    loadWorkplaces(officeId);
                } else {
                    $('#workplaceSelect').empty().append('<option value="">Çalışma Yeri Seçin...</option>');
                }
            });

            $('#workplaceSelect').on('change', function () {
                var workplaceId = $(this).val();
                $('#staffList').empty();
                $('#contractList').empty(); // Kontrakt listesini temizle

                if (workplaceId) {
                    loadStaffByWorkplace(workplaceId);
                    loadContractsByWorkplace(workplaceId);
                }
            });
        });

        function loadOffices() {
            $.ajax({
                url: 'https://localhost:44384/api/office/all',
                type: 'GET',
                success: function (data) {
                    populateOffices(data);
                },
                error: function () {
                    alert('Ofisler yüklenirken bir hata oluştu.');
                }
            });
        }

        function populateOffices(offices) {
            $('#officeSelect').empty().append('<option value="">Ofis Seçin...</option>');
            $.each(offices, function (i, office) {
                $('#officeSelect').append('<option value="' + office.id + '">' + office.officeName + '</option>');
            });
        }

        function loadWorkplaces(officeId) {
            $.ajax({
                url: 'https://localhost:44384/api/office/' + officeId + '/active-workplaces',
                type: 'GET',
                success: function (data) {
                    populateWorkplaces(data);
                },
                error: function () {
                    alert('Çalışma yerleri yüklenirken bir hata oluştu.');
                }
            });
        }

        function populateWorkplaces(workplaces) {
            $.each(workplaces, function (i, workplace) {
                $('#workplaceSelect').append('<option value="' + workplace.id + '">' + workplace.name + '</option>');
            });
        }

        function loadStaffByWorkplace(workplaceId) {
            $.ajax({
                url: 'https://localhost:44384/api/accident/staff/' + workplaceId,
                type: 'GET',
                success: function (data) {
                    populateStaff(data);
                },
                error: function () {
                    alert('Doktorlar yüklenirken bir hata oluştu.');
                }
            });
        }

        function populateStaff(staff) {
            $('#staffList').empty();
            $.each(staff, function (i, member) {
                $('#staffList').append('<option value="' + member.id + '">' + member.name + '</option>');
            });
        }

        function loadContractsByWorkplace(workplaceId) {
            $.ajax({
                url: 'https://localhost:44384/api/accident/contracts/' + workplaceId,
                type: 'GET',
                success: function (data) {
                    populateContracts(data);
                },
                error: function () {
                    alert('Kontraktlar yüklenirken bir hata oluştu.');
                }
            });
        }

        function populateContracts(contracts) {
            $('#contractList').empty();
            $.each(contracts, function (i, contract) {
                $('#contractList').append('<option value="' + contract.id + '">' + contract.name + '</option>');
            });
        }

        function submitAccidentForm() {
            const selectedStaff = [...document.getElementById('staffList').options].filter(option => option.selected).map(option => parseInt(option.value));
            const selectedContracts = [...document.getElementById('contractList').options].filter(option => option.selected).map(option => parseInt(option.value));

            const accidentData = {
                accDate: document.getElementById('accDate').value,
                accTime: document.getElementById('accTime').value,
                fatality: document.getElementById('fatality').checked,
                injury: document.getElementById('injury').checked,
                propertyDamage: document.getElementById('propertyDamage').checked,
                nearMiss: document.getElementById('nearMiss').checked,
                storyOfAccident: document.getElementById('storyOfAccident').value,
                idWorkplace: parseInt(document.getElementById('workplaceSelect').value), // Çalışma yeri ID'sini al
                sgkInfoDate: document.getElementById('sgkInfoDate').value,
                sgkInfoCheck: document.getElementById('sgkInfoCheck').checked,
                selectedStaffIds: selectedStaff,
                selectedContractIds: selectedContracts
            };

            fetch('https://localhost:44384/api/accident', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(accidentData)
            })
            .then(response => {
                if (response.ok) {
                    alert('Kaza başarıyla kaydedildi!');
                    // Başka sayfaya yönlendirme veya formu sıfırlama işlemi yapabilirsiniz
                } else {
                    throw new Error('Kayıt sırasında hata oluştu.');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert(error.message);
            });
        }
    </script>
}
